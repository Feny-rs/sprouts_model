{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Feny-rs/sprouts_model/blob/master/model%202%20klasifikasi\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# YOLOv5 Classification Tutorial\n",
        "\n",
        "YOLOv5 supports classification tasks too. This is the official YOLOv5 classification notebook tutorial. YOLOv5 is maintained by [Ultralytics](https://github.com/ultralytics/yolov5).\n",
        "\n",
        "This notebook covers:\n",
        "\n",
        "*   Inference with out-of-the-box YOLOv5 classification on ImageNet\n",
        "*  [Training YOLOv5 classification](https://blog.roboflow.com//train-YOLOv5-classification-custom-data) on custom data\n",
        "\n",
        "*Looking for custom data? Explore over 66M community datasets on [Roboflow Universe](https://universe.roboflow.com).*\n",
        "\n",
        "This notebook was created with Google Colab. [Click here](https://colab.research.google.com/drive/1FiSNz9f_nT8aFtDEU3iDAQKlPT8SCVni?usp=sharing) to run it."
      ],
      "metadata": {
        "id": "5GYQX3of4QiW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Setup\n",
        "\n",
        "Pull in respective libraries to prepare the notebook environment."
      ],
      "metadata": {
        "id": "-PJ8vlYXbWtN"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "pIM7fOwm8A7l",
        "outputId": "4bf8a116-bbf2-4e3a-bef0-07e7214b1e15",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Setup complete ✅ (2 CPUs, 12.7 GB RAM, 27.1/78.2 GB disk)\n"
          ]
        }
      ],
      "source": [
        "!git clone https://github.com/ultralytics/yolov5  # clone\n",
        "%cd yolov5\n",
        "%pip install -qr requirements.txt  # install\n",
        "\n",
        "import torch\n",
        "import utils\n",
        "display = utils.notebook_init()  # checks"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Infer on ImageNet\n",
        "\n",
        "To demonstrate YOLOv5 classification, we'll leverage an already trained model. In this case, we'll download the ImageNet trained models pretrained on ImageNet using YOLOv5 Utils."
      ],
      "metadata": {
        "id": "i_DrUi2nmF40"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from utils.downloads import attempt_download\n",
        "\n",
        "p5 = ['n', 's', 'm', 'l', 'x']  # P5 models\n",
        "cls = [f'{x}-cls' for x in p5]  # classification models\n",
        "\n",
        "for x in cls:\n",
        "    attempt_download(f'weights/yolov5{x}.pt')"
      ],
      "metadata": {
        "id": "o2scLEh6EYnL",
        "outputId": "85cc2c1e-7747-47b4-e68e-3e98198ae18f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5n-cls.pt to weights/yolov5n-cls.pt...\n",
            "100%|██████████| 4.87M/4.87M [00:00<00:00, 159MB/s]\n",
            "\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-cls.pt to weights/yolov5s-cls.pt...\n",
            "100%|██████████| 10.5M/10.5M [00:00<00:00, 237MB/s]\n",
            "\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5m-cls.pt to weights/yolov5m-cls.pt...\n",
            "100%|██████████| 24.9M/24.9M [00:00<00:00, 324MB/s]\n",
            "\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5l-cls.pt to weights/yolov5l-cls.pt...\n",
            "100%|██████████| 50.9M/50.9M [00:00<00:00, 331MB/s]\n",
            "\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5x-cls.pt to weights/yolov5x-cls.pt...\n",
            "100%|██████████| 92.0M/92.0M [00:01<00:00, 51.8MB/s]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Now, we can infer on an example image from the ImageNet dataset."
      ],
      "metadata": {
        "id": "Fn2_a38DmZ2H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Download example image\n",
        "import requests\n",
        "image_url = \"https://i.imgur.com/OczPfaz.jpg\"\n",
        "img_data = requests.get(image_url).content\n",
        "with open('bananas.jpg', 'wb') as handler:\n",
        "    handler.write(img_data)"
      ],
      "metadata": {
        "id": "L9objhVHnS-h"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Infer using classify/predict.py\n",
        "!python classify/predict.py --weights ./weigths/yolov5s-cls.pt --source bananas.jpg"
      ],
      "metadata": {
        "id": "qqxF5pHCrLd3",
        "outputId": "4f28f036-bce8-4de8-9ca6-3551e46ad161",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34m\u001b[1mclassify/predict: \u001b[0mweights=['./weigths/yolov5s-cls.pt'], source=bananas.jpg, data=data/coco128.yaml, imgsz=[224, 224], device=, view_img=False, save_txt=False, nosave=False, augment=False, visualize=False, update=False, project=runs/predict-cls, name=exp, exist_ok=False, half=False, dnn=False, vid_stride=1\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-cls.pt to weigths/yolov5s-cls.pt...\n",
            "100% 10.5M/10.5M [00:00<00:00, 188MB/s]\n",
            "\n",
            "Fusing layers... \n",
            "Model summary: 117 layers, 5447688 parameters, 0 gradients, 11.4 GFLOPs\n",
            "image 1/1 /content/yolov5/bananas.jpg: 224x224 banana 0.96, zucchini 0.00, acorn squash 0.00, spaghetti squash 0.00, green mamba 0.00, 3.0ms\n",
            "Speed: 0.4ms pre-process, 3.0ms inference, 28.2ms NMS per image at shape (1, 3, 224, 224)\n",
            "Results saved to \u001b[1mruns/predict-cls/exp\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "From the output, we can see the ImageNet trained model correctly predicts the class `banana` with `0.95` confidence."
      ],
      "metadata": {
        "id": "yQmj7IXqo3kk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## 2. (Optional) Validate\n",
        "\n",
        "Use the `classify/val.py` script to run validation for the model. This will show us the model's performance on each class.\n",
        "\n",
        "First, we need to download ImageNet."
      ],
      "metadata": {
        "id": "5EosQzyDCk3W"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# # WARNING: takes ~20 minutes\n",
        "# !bash data/scripts/get_imagenet.sh --val"
      ],
      "metadata": {
        "id": "HwAYptjCq-C_"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # run the validation script\n",
        "# !python classify/val.py --weights ./weigths/yolov5s-cls.pt --data ../datasets/imagenet"
      ],
      "metadata": {
        "id": "CoHdKXWc8hrD"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "The output shows accuracy metrics for the ImageNet validation dataset including per class accuracy."
      ],
      "metadata": {
        "id": "r2coOcIjuzCO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 3. Train On Custom Data\n",
        "\n",
        "To train on custom data, we need to prepare a dataset with custom labels.\n",
        "\n",
        "To prepare custom data, we'll use [Roboflow](https://roboflow.com). Roboflow enables easy dataset prep with your team, including labeling, formatting into the right export format, deploying, and active learning with a `pip` package.\n",
        "\n",
        "If you need custom data, there are over 66M open source images from the community on [Roboflow Universe](https://universe.roboflow.com).\n",
        "\n",
        "(For more guidance, here's a detailed blog on [training YOLOv5 classification on custom data](https://blog.roboflow.com/train-YOLOv5-classification-custom-data).)\n",
        "\n",
        "\n",
        "Create a free Roboflow account, upload your data, and label.\n",
        "\n",
        "![](https://s4.gifyu.com/images/fruit-labeling.gif)"
      ],
      "metadata": {
        "id": "9bXHHYeVDCXg"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Load Custom Dataset\n",
        "\n",
        "Next, we'll export our dataset into the right directory structure for training YOLOv5 classification to load into this notebook. Select the `Export` button at the top of the version page, `Folder Structure` type, and `show download code`.\n",
        "\n",
        "The ensures all our directories are in the right format:\n",
        "\n",
        "```\n",
        "dataset\n",
        "├── train\n",
        "│   ├── class-one\n",
        "│   │   ├── IMG_123.jpg\n",
        "│   └── class-two\n",
        "│       ├── IMG_456.jpg\n",
        "├── valid\n",
        "│   ├── class-one\n",
        "│   │   ├── IMG_789.jpg\n",
        "│   └── class-two\n",
        "│       ├── IMG_101.jpg\n",
        "├── test\n",
        "│   ├── class-one\n",
        "│   │   ├── IMG_121.jpg\n",
        "│   └── class-two\n",
        "│       ├── IMG_341.jpg\n",
        "```\n",
        "\n",
        "![](https://i.imgur.com/BF9BNR8.gif)\n",
        "\n",
        "\n",
        "Copy and paste that snippet into the cell below."
      ],
      "metadata": {
        "id": "Cu6-lrukD6Hc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Ensure we're in the right directory to download our custom dataset\n",
        "import os\n",
        "os.makedirs(\"../datasets/\", exist_ok=True)\n",
        "%cd ../datasets/"
      ],
      "metadata": {
        "id": "6IIgJbP7G6Th",
        "outputId": "ec0471f0-24d3-44a3-8e70-3a68a1b30a05",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/datasets\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install roboflow\n",
        "\n",
        "from roboflow import Roboflow\n",
        "rf = Roboflow(api_key=\"CLAcDuqXX6buLaKIgh29\")\n",
        "project = rf.workspace(\"politeknik-negeri-semarang-nurcn\").project(\"yolo-sprouts-classification\")\n",
        "dataset = project.version(4).download(\"folder\")"
      ],
      "metadata": {
        "id": "He6JwHIlG-W_",
        "outputId": "9938b9c8-8f87-4eda-e5b8-52406bf58ba9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        }
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting roboflow\n",
            "  Downloading roboflow-1.1.9-py3-none-any.whl (63 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m63.3/63.3 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: certifi==2023.7.22 in /usr/local/lib/python3.10/dist-packages (from roboflow) (2023.7.22)\n",
            "Collecting chardet==4.0.0 (from roboflow)\n",
            "  Downloading chardet-4.0.0-py2.py3-none-any.whl (178 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m178.7/178.7 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting cycler==0.10.0 (from roboflow)\n",
            "  Downloading cycler-0.10.0-py2.py3-none-any.whl (6.5 kB)\n",
            "Collecting idna==2.10 (from roboflow)\n",
            "  Downloading idna-2.10-py2.py3-none-any.whl (58 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.8/58.8 kB\u001b[0m \u001b[31m8.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.4.5)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from roboflow) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.23.5)\n",
            "Collecting opencv-python-headless==4.8.0.74 (from roboflow)\n",
            "  Downloading opencv_python_headless-4.8.0.74-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (49.1 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.1/49.1 MB\u001b[0m \u001b[31m16.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: Pillow>=7.1.2 in /usr/local/lib/python3.10/dist-packages (from roboflow) (10.1.0)\n",
            "Collecting pyparsing==2.4.7 (from roboflow)\n",
            "  Downloading pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m67.8/67.8 kB\u001b[0m \u001b[31m11.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: python-dateutil in /usr/local/lib/python3.10/dist-packages (from roboflow) (2.8.2)\n",
            "Collecting python-dotenv (from roboflow)\n",
            "  Downloading python_dotenv-1.0.0-py3-none-any.whl (19 kB)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from roboflow) (2.31.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from roboflow) (1.16.0)\n",
            "Collecting supervision (from roboflow)\n",
            "  Downloading supervision-0.16.0-py3-none-any.whl (72 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m72.2/72.2 kB\u001b[0m \u001b[31m11.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: urllib3>=1.26.6 in /usr/local/lib/python3.10/dist-packages (from roboflow) (2.0.7)\n",
            "Requirement already satisfied: tqdm>=4.41.0 in /usr/local/lib/python3.10/dist-packages (from roboflow) (4.66.1)\n",
            "Requirement already satisfied: PyYAML>=5.3.1 in /usr/local/lib/python3.10/dist-packages (from roboflow) (6.0.1)\n",
            "Collecting requests-toolbelt (from roboflow)\n",
            "  Downloading requests_toolbelt-1.0.0-py2.py3-none-any.whl (54 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.5/54.5 kB\u001b[0m \u001b[31m8.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting python-magic (from roboflow)\n",
            "  Downloading python_magic-0.4.27-py2.py3-none-any.whl (13 kB)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->roboflow) (1.2.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->roboflow) (4.44.0)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->roboflow) (23.2)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->roboflow) (3.3.2)\n",
            "Requirement already satisfied: scipy<2.0.0,>=1.9.0 in /usr/local/lib/python3.10/dist-packages (from supervision->roboflow) (1.11.3)\n",
            "Installing collected packages: python-magic, python-dotenv, pyparsing, opencv-python-headless, idna, cycler, chardet, supervision, requests-toolbelt, roboflow\n",
            "  Attempting uninstall: pyparsing\n",
            "    Found existing installation: pyparsing 3.1.1\n",
            "    Uninstalling pyparsing-3.1.1:\n",
            "      Successfully uninstalled pyparsing-3.1.1\n",
            "  Attempting uninstall: opencv-python-headless\n",
            "    Found existing installation: opencv-python-headless 4.8.1.78\n",
            "    Uninstalling opencv-python-headless-4.8.1.78:\n",
            "      Successfully uninstalled opencv-python-headless-4.8.1.78\n",
            "  Attempting uninstall: idna\n",
            "    Found existing installation: idna 3.4\n",
            "    Uninstalling idna-3.4:\n",
            "      Successfully uninstalled idna-3.4\n",
            "  Attempting uninstall: cycler\n",
            "    Found existing installation: cycler 0.12.1\n",
            "    Uninstalling cycler-0.12.1:\n",
            "      Successfully uninstalled cycler-0.12.1\n",
            "  Attempting uninstall: chardet\n",
            "    Found existing installation: chardet 5.2.0\n",
            "    Uninstalling chardet-5.2.0:\n",
            "      Successfully uninstalled chardet-5.2.0\n",
            "Successfully installed chardet-4.0.0 cycler-0.10.0 idna-2.10 opencv-python-headless-4.8.0.74 pyparsing-2.4.7 python-dotenv-1.0.0 python-magic-0.4.27 requests-toolbelt-1.0.0 roboflow-1.1.9 supervision-0.16.0\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "application/vnd.colab-display-data+json": {
              "pip_warning": {
                "packages": [
                  "chardet",
                  "cv2",
                  "cycler",
                  "idna",
                  "pyparsing"
                ]
              }
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "loading Roboflow workspace...\n",
            "loading Roboflow project...\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "Downloading Dataset Version Zip in Yolo-Sprouts-Classification-4 to folder:: 100%|██████████| 41361/41361 [00:01<00:00, 22506.57it/s]"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "\n",
            "Extracting Dataset Version Zip to Yolo-Sprouts-Classification-4 in folder:: 100%|██████████| 1291/1291 [00:00<00:00, 6369.97it/s]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Save the dataset name to the environment so we can use it in a system call later\n",
        "dataset_name = dataset.location.split(os.sep)[-1]\n",
        "os.environ[\"DATASET_NAME\"] = dataset_name"
      ],
      "metadata": {
        "id": "wLQbThFICpn4"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Train On Custom Data 🎉\n",
        "Here, we use the DATASET_NAME environment variable to pass our dataset to the `--data` parameter.\n",
        "\n",
        "Note: we're training for 100 epochs here. We're also starting training from the pretrained weights. Larger datasets will likely benefit from longer training."
      ],
      "metadata": {
        "id": "-5z7Yv42FGrK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%cd ../yolov5\n",
        "!python classify/train.py --model yolov5s-cls.pt --data $DATASET_NAME --epochs 100 --img 128 --pretrained weights/yolov5s-cls.pt"
      ],
      "metadata": {
        "id": "MXWTTN2BEaqe",
        "outputId": "372ff6bc-b30a-432e-d916-f7e6dae61048",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/yolov5\n",
            "2023-11-13 16:22:46.582691: E tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:9342] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
            "2023-11-13 16:22:46.582756: E tensorflow/compiler/xla/stream_executor/cuda/cuda_fft.cc:609] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
            "2023-11-13 16:22:46.582797: E tensorflow/compiler/xla/stream_executor/cuda/cuda_blas.cc:1518] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
            "\u001b[34m\u001b[1mclassify/train: \u001b[0mmodel=yolov5s-cls.pt, data=Yolo-Sprouts-Classification-4, epochs=100, batch_size=64, imgsz=128, nosave=False, cache=None, device=, workers=8, project=runs/train-cls, name=exp, exist_ok=False, pretrained=weights/yolov5s-cls.pt, optimizer=Adam, lr0=0.001, decay=5e-05, label_smoothing=0.1, cutoff=None, dropout=None, verbose=False, seed=0, local_rank=-1\n",
            "\u001b[34m\u001b[1mgithub: \u001b[0mup to date with https://github.com/ultralytics/yolov5 ✅\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "\u001b[34m\u001b[1mTensorBoard: \u001b[0mStart with 'tensorboard --logdir runs/train-cls', view at http://localhost:6006/\n",
            "\u001b[34m\u001b[1malbumentations: \u001b[0mRandomResizedCrop(p=1.0, height=128, width=128, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=1), HorizontalFlip(p=0.5), ColorJitter(p=0.5, brightness=[0.6, 1.4], contrast=[0.6, 1.4], saturation=[0.6, 1.4], hue=[0, 0]), Normalize(p=1.0, mean=(0.485, 0.456, 0.406), std=(0.229, 0.224, 0.225), max_pixel_value=255.0), ToTensorV2(always_apply=True, p=1.0, transpose_mask=False)\n",
            "Downloading https://github.com/ultralytics/yolov5/releases/download/v7.0/yolov5s-cls.pt to yolov5s-cls.pt...\n",
            "100% 10.5M/10.5M [00:00<00:00, 109MB/s]\n",
            "\n",
            "Model summary: 149 layers, 4177604 parameters, 4177604 gradients, 10.5 GFLOPs\n",
            "\u001b[34m\u001b[1moptimizer:\u001b[0m Adam(lr=0.001) with parameter groups 32 weight(decay=0.0), 33 weight(decay=5e-05), 33 bias\n",
            "Image sizes 128 train, 128 test\n",
            "Using 1 dataloader workers\n",
            "Logging results to \u001b[1mruns/train-cls/exp\u001b[0m\n",
            "Starting yolov5s-cls.pt training on Yolo-Sprouts-Classification-4 dataset with 4 classes for 100 epochs...\n",
            "\n",
            "     Epoch   GPU_mem  train_loss   test_loss    top1_acc    top5_acc\n",
            "     1/100    0.732G        1.22        1.34       0.235           1: 100% 17/17 [00:07<00:00,  2.34it/s]\n",
            "     2/100    0.732G        1.19         1.4       0.235           1: 100% 17/17 [00:06<00:00,  2.58it/s]\n",
            "     3/100    0.732G        1.17        1.35       0.471           1: 100% 17/17 [00:07<00:00,  2.21it/s]\n",
            "     4/100    0.732G        1.17        1.39       0.471           1: 100% 17/17 [00:06<00:00,  2.67it/s]\n",
            "     5/100    0.732G        1.16        1.37       0.471           1: 100% 17/17 [00:07<00:00,  2.28it/s]\n",
            "     6/100    0.732G        1.17        1.21       0.294           1: 100% 17/17 [00:06<00:00,  2.81it/s]\n",
            "     7/100    0.732G        1.16        1.35       0.471           1: 100% 17/17 [00:08<00:00,  2.10it/s]\n",
            "     8/100    0.732G        1.15        1.14       0.559           1: 100% 17/17 [00:06<00:00,  2.82it/s]\n",
            "     9/100    0.732G        1.15        1.17       0.382           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    10/100    0.732G        1.16        1.06       0.618           1: 100% 17/17 [00:05<00:00,  2.84it/s]\n",
            "    11/100    0.732G        1.16        1.12       0.368           1: 100% 17/17 [00:08<00:00,  2.04it/s]\n",
            "    12/100    0.732G        1.14        1.36        0.25           1: 100% 17/17 [00:06<00:00,  2.83it/s]\n",
            "    13/100    0.732G        1.13        1.24       0.265           1: 100% 17/17 [00:08<00:00,  2.08it/s]\n",
            "    14/100    0.732G        1.14        2.02       0.162           1: 100% 17/17 [00:06<00:00,  2.81it/s]\n",
            "    15/100    0.732G        1.15        1.57       0.294           1: 100% 17/17 [00:08<00:00,  2.08it/s]\n",
            "    16/100    0.732G        1.13        2.04       0.265           1: 100% 17/17 [00:06<00:00,  2.79it/s]\n",
            "    17/100    0.732G        1.15        3.79       0.221           1: 100% 17/17 [00:08<00:00,  2.10it/s]\n",
            "    18/100    0.732G        1.14        1.14       0.368           1: 100% 17/17 [00:06<00:00,  2.71it/s]\n",
            "    19/100    0.732G        1.13        1.26       0.294           1: 100% 17/17 [00:07<00:00,  2.25it/s]\n",
            "    20/100    0.732G        1.14        1.25       0.309           1: 100% 17/17 [00:06<00:00,  2.56it/s]\n",
            "    21/100    0.732G        1.13        1.09       0.382           1: 100% 17/17 [00:07<00:00,  2.42it/s]\n",
            "    22/100    0.732G        1.12        3.27       0.191           1: 100% 17/17 [00:07<00:00,  2.31it/s]\n",
            "    23/100    0.732G        1.12        1.74       0.294           1: 100% 17/17 [00:06<00:00,  2.67it/s]\n",
            "    24/100    0.732G        1.14        1.23       0.324           1: 100% 17/17 [00:07<00:00,  2.13it/s]\n",
            "    25/100    0.732G        1.14        2.74       0.147           1: 100% 17/17 [00:06<00:00,  2.78it/s]\n",
            "    26/100    0.732G        1.11        1.23       0.294           1: 100% 17/17 [00:07<00:00,  2.13it/s]\n",
            "    27/100    0.732G         1.1        1.66       0.294           1: 100% 17/17 [00:06<00:00,  2.79it/s]\n",
            "    28/100    0.732G        1.13        1.13       0.368           1: 100% 17/17 [00:08<00:00,  2.10it/s]\n",
            "    29/100    0.732G        1.12        1.29       0.265           1: 100% 17/17 [00:06<00:00,  2.79it/s]\n",
            "    30/100    0.732G         1.1        1.21       0.309           1: 100% 17/17 [00:08<00:00,  2.06it/s]\n",
            "    31/100    0.732G        1.11         2.2       0.176           1: 100% 17/17 [00:06<00:00,  2.79it/s]\n",
            "    32/100    0.732G        1.12        1.73       0.176           1: 100% 17/17 [00:08<00:00,  2.09it/s]\n",
            "    33/100    0.732G        1.13        1.32       0.412           1: 100% 17/17 [00:05<00:00,  2.84it/s]\n",
            "    34/100    0.732G        1.12        1.46       0.235           1: 100% 17/17 [00:08<00:00,  2.10it/s]\n",
            "    35/100    0.732G        1.12        1.15       0.368           1: 100% 17/17 [00:05<00:00,  2.86it/s]\n",
            "    36/100    0.732G        1.12        1.21       0.309           1: 100% 17/17 [00:07<00:00,  2.19it/s]\n",
            "    37/100    0.732G        1.11         1.2       0.338           1: 100% 17/17 [00:06<00:00,  2.64it/s]\n",
            "    38/100    0.732G        1.13        1.32       0.265           1: 100% 17/17 [00:07<00:00,  2.36it/s]\n",
            "    39/100    0.732G        1.15        1.11       0.382           1: 100% 17/17 [00:06<00:00,  2.50it/s]\n",
            "    40/100    0.732G        1.12        1.09       0.382           1: 100% 17/17 [00:06<00:00,  2.57it/s]\n",
            "    41/100    0.732G        1.11        1.21       0.309           1: 100% 17/17 [00:07<00:00,  2.31it/s]\n",
            "    42/100    0.732G        1.12        1.16       0.338           1: 100% 17/17 [00:06<00:00,  2.81it/s]\n",
            "    43/100    0.732G        1.11        1.24       0.515           1: 100% 17/17 [00:08<00:00,  2.11it/s]\n",
            "    44/100    0.732G        1.11        1.12       0.368           1: 100% 17/17 [00:05<00:00,  2.88it/s]\n",
            "    45/100    0.732G        1.12        1.14       0.368           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    46/100    0.732G        1.11         1.1       0.368           1: 100% 17/17 [00:06<00:00,  2.82it/s]\n",
            "    47/100    0.732G         1.1        1.29       0.279           1: 100% 17/17 [00:07<00:00,  2.13it/s]\n",
            "    48/100    0.732G        1.09         1.4       0.397           1: 100% 17/17 [00:05<00:00,  2.91it/s]\n",
            "    49/100    0.732G        1.12        1.24       0.529           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    50/100    0.732G         1.1        1.29       0.515           1: 100% 17/17 [00:05<00:00,  2.87it/s]\n",
            "    51/100    0.732G        1.09        5.89       0.471           1: 100% 17/17 [00:07<00:00,  2.24it/s]\n",
            "    52/100    0.732G         1.1        9.41       0.471           1: 100% 17/17 [00:06<00:00,  2.72it/s]\n",
            "    53/100    0.732G        1.08        9.48       0.471           1: 100% 17/17 [00:07<00:00,  2.41it/s]\n",
            "    54/100    0.732G        1.07        1.34       0.618           1: 100% 17/17 [00:07<00:00,  2.36it/s]\n",
            "    55/100    0.732G        1.06        1.06       0.559           1: 100% 17/17 [00:06<00:00,  2.73it/s]\n",
            "    56/100    0.732G        1.05        1.24       0.382           1: 100% 17/17 [00:07<00:00,  2.25it/s]\n",
            "    57/100    0.732G        1.07        1.38       0.235           1: 100% 17/17 [00:05<00:00,  2.97it/s]\n",
            "    58/100    0.732G        1.05        1.06       0.588           1: 100% 17/17 [00:08<00:00,  2.09it/s]\n",
            "    59/100    0.732G        1.03       0.918       0.691           1: 100% 17/17 [00:05<00:00,  2.87it/s]\n",
            "    60/100    0.732G           1        1.99       0.221           1: 100% 17/17 [00:07<00:00,  2.16it/s]\n",
            "    61/100    0.732G        1.01        2.45       0.162           1: 100% 17/17 [00:05<00:00,  2.84it/s]\n",
            "    62/100    0.732G       0.994        3.09       0.456           1: 100% 17/17 [00:08<00:00,  2.00it/s]\n",
            "    63/100    0.732G        0.98        1.12       0.441           1: 100% 17/17 [00:05<00:00,  2.88it/s]\n",
            "    64/100    0.732G       0.979       0.935       0.721           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    65/100    0.732G       0.955        3.53       0.471           1: 100% 17/17 [00:05<00:00,  2.86it/s]\n",
            "    66/100    0.732G       0.957        1.46       0.412           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    67/100    0.732G       0.939        1.24       0.574           1: 100% 17/17 [00:06<00:00,  2.76it/s]\n",
            "    68/100    0.732G        0.93         1.8         0.5           1: 100% 17/17 [00:07<00:00,  2.32it/s]\n",
            "    69/100    0.732G       0.942        1.14       0.441           1: 100% 17/17 [00:06<00:00,  2.63it/s]\n",
            "    70/100    0.732G       0.897       0.727       0.853           1: 100% 17/17 [00:06<00:00,  2.65it/s]\n",
            "    71/100    0.732G       0.918        1.21       0.456           1: 100% 17/17 [00:07<00:00,  2.29it/s]\n",
            "    72/100    0.732G       0.905        1.05       0.544           1: 100% 17/17 [00:06<00:00,  2.82it/s]\n",
            "    73/100    0.732G       0.916        1.09       0.603           1: 100% 17/17 [00:07<00:00,  2.15it/s]\n",
            "    74/100    0.732G       0.901        1.08       0.515           1: 100% 17/17 [00:05<00:00,  2.91it/s]\n",
            "    75/100    0.732G       0.882       0.903       0.721           1: 100% 17/17 [00:08<00:00,  2.11it/s]\n",
            "    76/100    0.732G       0.885        0.91       0.765           1: 100% 17/17 [00:05<00:00,  2.87it/s]\n",
            "    77/100    0.732G         0.9        2.82       0.471           1: 100% 17/17 [00:07<00:00,  2.16it/s]\n",
            "    78/100    0.732G        0.89       0.731       0.853           1: 100% 17/17 [00:05<00:00,  2.92it/s]\n",
            "    79/100    0.732G       0.852        3.35         0.5           1: 100% 17/17 [00:08<00:00,  2.12it/s]\n",
            "    80/100    0.732G       0.858       0.754       0.809           1: 100% 17/17 [00:05<00:00,  2.90it/s]\n",
            "    81/100    0.732G       0.851       0.854       0.706           1: 100% 17/17 [00:07<00:00,  2.32it/s]\n",
            "    82/100    0.732G       0.839       0.766       0.794           1: 100% 17/17 [00:06<00:00,  2.64it/s]\n",
            "    83/100    0.732G       0.856       0.696       0.838           1: 100% 17/17 [00:06<00:00,  2.48it/s]\n",
            "    84/100    0.732G       0.844       0.716       0.853           1: 100% 17/17 [00:07<00:00,  2.43it/s]\n",
            "    85/100    0.732G       0.847       0.799        0.75           1: 100% 17/17 [00:06<00:00,  2.80it/s]\n",
            "    86/100    0.732G       0.844       0.877       0.735           1: 100% 17/17 [00:07<00:00,  2.20it/s]\n",
            "    87/100    0.732G       0.831       0.918       0.721           1: 100% 17/17 [00:06<00:00,  2.82it/s]\n",
            "    88/100    0.732G       0.821       0.824       0.735           1: 100% 17/17 [00:08<00:00,  2.10it/s]\n",
            "    89/100    0.732G       0.808       0.765       0.824           1: 100% 17/17 [00:05<00:00,  2.86it/s]\n",
            "    90/100    0.732G       0.812       0.903       0.706           1: 100% 17/17 [00:07<00:00,  2.15it/s]\n",
            "    91/100    0.732G       0.811         0.7       0.868           1: 100% 17/17 [00:05<00:00,  2.86it/s]\n",
            "    92/100    0.732G        0.82       0.942       0.691           1: 100% 17/17 [00:08<00:00,  2.11it/s]\n",
            "    93/100    0.732G       0.809       0.693       0.868           1: 100% 17/17 [00:06<00:00,  2.81it/s]\n",
            "    94/100    0.732G       0.815       0.728       0.868           1: 100% 17/17 [00:07<00:00,  2.17it/s]\n",
            "    95/100    0.732G       0.801       0.723       0.809           1: 100% 17/17 [00:05<00:00,  2.89it/s]\n",
            "    96/100    0.732G       0.785       0.685       0.853           1: 100% 17/17 [00:07<00:00,  2.32it/s]\n",
            "    97/100    0.732G       0.795       0.786       0.765           1: 100% 17/17 [00:06<00:00,  2.46it/s]\n",
            "    98/100    0.732G       0.795       0.761       0.794           1: 100% 17/17 [00:06<00:00,  2.43it/s]\n",
            "    99/100    0.732G       0.788       0.619       0.897           1: 100% 17/17 [00:07<00:00,  2.43it/s]\n",
            "   100/100    0.732G       0.783       0.629       0.912           1: 100% 17/17 [00:06<00:00,  2.62it/s]\n",
            "\n",
            "Training complete (0.199 hours)\n",
            "Results saved to \u001b[1mruns/train-cls/exp\u001b[0m\n",
            "Predict:         python classify/predict.py --weights runs/train-cls/exp/weights/best.pt --source im.jpg\n",
            "Validate:        python classify/val.py --weights runs/train-cls/exp/weights/best.pt --data /content/datasets/Yolo-Sprouts-Classification-4\n",
            "Export:          python export.py --weights runs/train-cls/exp/weights/best.pt --include onnx\n",
            "PyTorch Hub:     model = torch.hub.load('ultralytics/yolov5', 'custom', 'runs/train-cls/exp/weights/best.pt')\n",
            "Visualize:       https://netron.app\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Validate Your Custom Model\n",
        "\n",
        "Repeat step 2 from above to test and validate your custom model."
      ],
      "metadata": {
        "id": "HHUFGeLbGd98"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!python classify/val.py --weights runs/train-cls/exp/weights/best.pt --data ../datasets/$DATASET_NAME"
      ],
      "metadata": {
        "id": "DIV7ydyKGZFL",
        "outputId": "6488ef11-59f7-4fb8-fae3-f19ba471e474",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34m\u001b[1mclassify/val: \u001b[0mdata=../datasets/Yolo-Sprouts-Classification-4, weights=['runs/train-cls/exp/weights/best.pt'], batch_size=128, imgsz=224, device=, workers=8, verbose=True, project=runs/val-cls, name=exp, exist_ok=False, half=False, dnn=False\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "Fusing layers... \n",
            "Model summary: 117 layers, 4171812 parameters, 0 gradients, 10.4 GFLOPs\n",
            "testing: 100% 1/1 [00:01<00:00,  1.32s/it]\n",
            "                   Class      Images    top1_acc    top5_acc\n",
            "                     all          68       0.838           1\n",
            "                abnormal          16       0.688           1\n",
            "                    mati          11           1           1\n",
            "                  normal          32       0.938           1\n",
            "       normal pembusukan           9       0.556           1\n",
            "Speed: 0.1ms pre-process, 5.6ms inference, 0.3ms post-process per image at shape (1, 3, 224, 224)\n",
            "Results saved to \u001b[1mruns/val-cls/exp2\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Infer With Your Custom Model"
      ],
      "metadata": {
        "id": "uH5tJNpEsi6g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Get the path of an image from the test or validation set\n",
        "if os.path.exists(os.path.join(dataset.location, \"test\")):\n",
        "  split_path = os.path.join(dataset.location, \"test\")\n",
        "else:\n",
        "  os.path.join(dataset.location, \"valid\")\n",
        "example_class = os.listdir(split_path)[2]\n",
        "example_image_name = os.listdir(os.path.join(split_path, example_class))[2]\n",
        "example_image_path = os.path.join(split_path, example_class, example_image_name)\n",
        "os.environ[\"TEST_IMAGE_PATH\"] = example_image_path\n",
        "\n",
        "print(f\"Inferring on an example of the class '{example_class}'\")\n",
        "\n",
        "#Infer\n",
        "!python classify/predict.py --weights runs/train-cls/exp/weights/best.pt --source $TEST_IMAGE_PATH"
      ],
      "metadata": {
        "id": "81lK1hU_sk54",
        "outputId": "33a2cc32-cc17-40c9-92ac-d4a5fca16e53",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inferring on an example of the class 'normal'\n",
            "\u001b[34m\u001b[1mclassify/predict: \u001b[0mweights=['runs/train-cls/exp/weights/best.pt'], source=/content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0523_JPG.rf.3427b362c8cd1c3504365f5a57b571da.jpg, data=data/coco128.yaml, imgsz=[224, 224], device=, view_img=False, save_txt=False, nosave=False, augment=False, visualize=False, update=False, project=runs/predict-cls, name=exp, exist_ok=False, half=False, dnn=False, vid_stride=1\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "Fusing layers... \n",
            "Model summary: 117 layers, 4171812 parameters, 0 gradients, 10.4 GFLOPs\n",
            "image 1/1 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0523_JPG.rf.3427b362c8cd1c3504365f5a57b571da.jpg: 224x224 normal 0.49, normal pembusukan 0.38, abnormal 0.07, mati 0.06, 5.1ms\n",
            "Speed: 0.4ms pre-process, 5.1ms inference, 8.6ms NMS per image at shape (1, 3, 224, 224)\n",
            "Results saved to \u001b[1mruns/predict-cls/exp5\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can see the inference results show ~3ms inference and the respective classes predicted probabilities."
      ],
      "metadata": {
        "id": "DdGuG-1kNjWT"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## (OPTIONAL) Improve Our Model with Active Learning\n",
        "\n",
        "Now that we've trained our model once, we will want to continue to improve its performance. Improvement is largely dependent on improving our dataset.\n",
        "\n",
        "We can programmatically upload example failure images back to our custom dataset based on conditions (like seeing an underrpresented class or a low confidence score) using the same `pip` package."
      ],
      "metadata": {
        "id": "I38IM6NXKNN9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Upload example image\n",
        "project.upload('/content/s.s 2023-11-14 at 00.05.53.png')\n"
      ],
      "metadata": {
        "id": "HycgSEnYKo0J",
        "outputId": "5d85fc83-a951-48c1-f623-9db636cdacfc",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Duplicate image not uploaded: /content/s.s 2023-11-14 at 00.05.53.png\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "zExt46byplC7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# # Example upload code\n",
        "# min_conf = float(\"inf\")\n",
        "# for pred in results:\n",
        "#     if pred[\"score\"] < min_conf:\n",
        "#         min_conf = pred[\"score\"]\n",
        "# if min_conf < 0.4:\n",
        "#     project.upload(image_path)"
      ],
      "metadata": {
        "id": "VwXDoz_vLK3V",
        "outputId": "1cec2187-fdb7-4061-9298-9845491cbb42",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 250
        }
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-34-c62948335638>\u001b[0m in \u001b[0;36m<cell line: 3>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Example upload code\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mmin_conf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"inf\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mpred\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"score\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0mmin_conf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0mmin_conf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpred\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"score\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'results' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# (BONUS) YOLOv5 classify/predict.py Accepts Several Input Methods\n",
        "- Webcam: `python classify/predict.py --weights yolov5s-cls.pt --source 0`\n",
        "- Image `python classify/predict.py --weights yolov5s-cls.pt --source img.jpg`\n",
        "- Video: `python classify/predict.py --weights yolov5s-cls.pt --source vid.mp4`\n",
        "- Directory: `python classify/predict.py --weights yolov5s-cls.pt --source path/`\n",
        "- Glob: `python classify/predict.py --weights yolov5s-cls.pt --source 'path/*.jpg'`\n",
        "- YouTube: `python classify/predict.py --weights yolov5s-cls.pt --source 'https://youtu.be/Zgi9g1ksQHc'`\n",
        "- RTSP, RTMP, HTTP stream: `python classify/predict.py --weights yolov5s-cls.pt --source 'rtsp://example.com/media.mp4'`"
      ],
      "metadata": {
        "id": "aYlfaHDusN-j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Directory Example"
      ],
      "metadata": {
        "id": "iKSP-SNTvcLJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Directory infer\n",
        "os.environ[\"TEST_CLASS_PATH\"] = test_class_path = os.path.join(*os.environ[\"TEST_IMAGE_PATH\"].split(os.sep)[:-1])\n",
        "print(f\"Infering on all images from the directory {os.environ['TEST_CLASS_PATH']}\")\n",
        "!python classify/predict.py --weights runs/train-cls/exp/weights/best.pt --source /$TEST_CLASS_PATH/"
      ],
      "metadata": {
        "id": "lwSoHcHcvjeD",
        "outputId": "4835063f-4f22-4fa9-fd5e-1c2f0aa41d4f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Infering on all images from the directory content/datasets/Yolo-Sprouts-Classification-4/test/normal\n",
            "\u001b[34m\u001b[1mclassify/predict: \u001b[0mweights=['runs/train-cls/exp/weights/best.pt'], source=/content/datasets/Yolo-Sprouts-Classification-4/test/normal/, data=data/coco128.yaml, imgsz=[224, 224], device=, view_img=False, save_txt=False, nosave=False, augment=False, visualize=False, update=False, project=runs/predict-cls, name=exp, exist_ok=False, half=False, dnn=False, vid_stride=1\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "Fusing layers... \n",
            "Model summary: 117 layers, 4171812 parameters, 0 gradients, 10.4 GFLOPs\n",
            "image 1/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0121_JPG.rf.dd793641977d14efbb4c0785bfa68e8e.jpg: 224x224 normal 0.61, mati 0.19, normal pembusukan 0.13, abnormal 0.06, 3.0ms\n",
            "image 2/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0126_JPG.rf.515bccc9491ccd12f665dc01ae573b90.jpg: 224x224 normal 0.66, mati 0.18, normal pembusukan 0.10, abnormal 0.06, 3.1ms\n",
            "image 3/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0198_JPG.rf.c05bdba0c3195aa8ed2d4da76f77be26.jpg: 224x224 normal 0.63, abnormal 0.16, normal pembusukan 0.16, mati 0.05, 2.8ms\n",
            "image 4/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0211_JPG.rf.286080102a20753363a1b6961093c833.jpg: 224x224 normal 0.52, normal pembusukan 0.23, abnormal 0.20, mati 0.05, 3.0ms\n",
            "image 5/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0216_JPG.rf.a81d926fa69b969990b9d111699d347e.jpg: 224x224 normal 0.56, abnormal 0.20, normal pembusukan 0.18, mati 0.06, 3.0ms\n",
            "image 6/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0225_JPG.rf.83865d07496df8540280d2f624813548.jpg: 224x224 normal 0.73, abnormal 0.13, normal pembusukan 0.09, mati 0.06, 3.1ms\n",
            "image 7/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0228_JPG.rf.b2c0d9890d5c21771f1de87935c2f82a.jpg: 224x224 normal 0.68, abnormal 0.15, normal pembusukan 0.13, mati 0.05, 2.9ms\n",
            "image 8/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0234_JPG.rf.d0181612de8da47a38396ae89d993ba7.jpg: 224x224 normal 0.66, abnormal 0.17, normal pembusukan 0.11, mati 0.06, 4.6ms\n",
            "image 9/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0235_JPG.rf.4bf690ac15788884db30efc413ea6c66.jpg: 224x224 normal 0.70, abnormal 0.14, normal pembusukan 0.09, mati 0.06, 3.1ms\n",
            "image 10/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0257_JPG.rf.e30e5b5325f5df5d0b1993ef5a082dfe.jpg: 224x224 normal 0.64, normal pembusukan 0.21, abnormal 0.11, mati 0.04, 2.9ms\n",
            "image 11/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0259_JPG.rf.734f120da3a47e526b564c01c3dadede.jpg: 224x224 normal 0.73, abnormal 0.10, normal pembusukan 0.10, mati 0.06, 3.0ms\n",
            "image 12/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0276_JPG.rf.50ae5425764864cfdf8cb234e8871c17.jpg: 224x224 normal 0.76, abnormal 0.11, normal pembusukan 0.07, mati 0.06, 3.0ms\n",
            "image 13/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0296_JPG.rf.fa4788a8c55c2d30b4fd7ab57741332f.jpg: 224x224 normal 0.78, abnormal 0.09, normal pembusukan 0.08, mati 0.06, 2.9ms\n",
            "image 14/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0305_JPG.rf.9675b5b73896fe34c61b50f99a2af9a0.jpg: 224x224 normal 0.79, abnormal 0.09, normal pembusukan 0.06, mati 0.06, 2.9ms\n",
            "image 15/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0309_JPG.rf.09f7ef901493d0c4fe062c89b2e41a79.jpg: 224x224 normal 0.63, normal pembusukan 0.18, abnormal 0.14, mati 0.05, 2.9ms\n",
            "image 16/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0312_JPG.rf.c0d0468537440ea9af181e1524b5ddf5.jpg: 224x224 normal 0.45, normal pembusukan 0.30, abnormal 0.20, mati 0.05, 3.1ms\n",
            "image 17/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0320_JPG.rf.78108432826baf25f0751742a3429c45.jpg: 224x224 normal 0.51, abnormal 0.25, normal pembusukan 0.16, mati 0.08, 2.8ms\n",
            "image 18/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0323_JPG.rf.dd6101c1fcd4f28da7f1283a4049a265.jpg: 224x224 normal 0.74, abnormal 0.11, normal pembusukan 0.10, mati 0.05, 2.9ms\n",
            "image 19/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0328_JPG.rf.06ee5415ed81bfb7c5c168253b2d4863.jpg: 224x224 normal 0.53, abnormal 0.24, normal pembusukan 0.16, mati 0.08, 6.0ms\n",
            "image 20/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0330_JPG.rf.22be8fe2d4cb2a13198895d3ab4e2391.jpg: 224x224 normal 0.53, abnormal 0.24, normal pembusukan 0.13, mati 0.09, 3.5ms\n",
            "image 21/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0344_JPG.rf.9e7eb6ac73b60b77ceee579d0492252d.jpg: 224x224 normal 0.69, abnormal 0.12, normal pembusukan 0.11, mati 0.08, 3.1ms\n",
            "image 22/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0371_JPG.rf.e8620246e2f52c2ec2c2d5be19fec715.jpg: 224x224 normal 0.70, normal pembusukan 0.11, abnormal 0.10, mati 0.09, 2.9ms\n",
            "image 23/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0383_JPG.rf.19559ce831bdba6e7a81cd0c720f2b1f.jpg: 224x224 normal 0.68, normal pembusukan 0.13, abnormal 0.11, mati 0.09, 3.3ms\n",
            "image 24/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0494_JPG.rf.a0085f48197058b67eb1a493fc33953e.jpg: 224x224 normal 0.69, normal pembusukan 0.15, mati 0.12, abnormal 0.04, 2.8ms\n",
            "image 25/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0495_JPG.rf.83a9960918c45541def3d588ad5c61b8.jpg: 224x224 normal 0.73, normal pembusukan 0.12, mati 0.12, abnormal 0.03, 2.9ms\n",
            "image 26/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0502_JPG.rf.f06133a8f8e084681a9c73bf3ff0c315.jpg: 224x224 normal 0.66, normal pembusukan 0.20, mati 0.09, abnormal 0.05, 2.9ms\n",
            "image 27/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0509_JPG.rf.cd5a7a5a00e749f98139641c909cbcd3.jpg: 224x224 normal 0.40, normal pembusukan 0.39, abnormal 0.14, mati 0.07, 2.8ms\n",
            "image 28/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0514_JPG.rf.ee3d7625c33b2ca23f8aed02c2f9ae63.jpg: 224x224 normal 0.51, normal pembusukan 0.31, mati 0.09, abnormal 0.09, 2.8ms\n",
            "image 29/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0523_JPG.rf.3427b362c8cd1c3504365f5a57b571da.jpg: 224x224 normal 0.49, normal pembusukan 0.38, abnormal 0.07, mati 0.06, 3.0ms\n",
            "image 30/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0548_JPG.rf.3934924a5e2b038e3050732797119512.jpg: 224x224 normal 0.48, normal pembusukan 0.40, abnormal 0.08, mati 0.04, 3.1ms\n",
            "image 31/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0549_JPG.rf.9188b8fe3d4f8f1b34a2402b8aa7bf96.jpg: 224x224 normal pembusukan 0.59, normal 0.28, abnormal 0.09, mati 0.04, 2.9ms\n",
            "image 32/32 /content/datasets/Yolo-Sprouts-Classification-4/test/normal/DSC_0916_JPG.rf.a223abf8c03d88ceca721ea3953f71bb.jpg: 224x224 abnormal 0.50, normal 0.18, mati 0.16, normal pembusukan 0.16, 2.8ms\n",
            "Speed: 0.3ms pre-process, 3.1ms inference, 0.3ms NMS per image at shape (1, 3, 224, 224)\n",
            "Results saved to \u001b[1mruns/predict-cls/exp6\u001b[0m\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###YouTube Example"
      ],
      "metadata": {
        "id": "kCCao9t8se8i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#YouTube infer\n",
        "!python classify/predict.py --weights runs/train-cls/exp/weights/best.pt --source 'https://www.youtube.com/watch?v=7AlYA4ItA74'"
      ],
      "metadata": {
        "id": "heebjpJBsakV",
        "outputId": "af2b9710-e525-49c7-badf-798f7607cdd6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[34m\u001b[1mclassify/predict: \u001b[0mweights=['runs/train-cls/exp/weights/best.pt'], source=https://www.youtube.com/watch?v=7AlYA4ItA74, data=data/coco128.yaml, imgsz=[224, 224], device=, view_img=False, save_txt=False, nosave=False, augment=False, visualize=False, update=False, project=runs/predict-cls, name=exp, exist_ok=False, half=False, dnn=False, vid_stride=1\n",
            "YOLOv5 🚀 v7.0-240-g84ec8b5 Python-3.10.12 torch-2.1.0+cu118 CUDA:0 (Tesla T4, 15102MiB)\n",
            "\n",
            "Fusing layers... \n",
            "Model summary: 117 layers, 4171812 parameters, 0 gradients, 10.4 GFLOPs\n",
            "WARNING ⚠️ Environment does not support cv2.imshow() or PIL Image.show()\n",
            "\n",
            "\u001b[31m\u001b[1mrequirements:\u001b[0m Ultralytics requirements ['pafy', 'youtube_dl==2020.12.2'] not found, attempting AutoUpdate...\n",
            "Collecting pafy\n",
            "  Downloading pafy-0.5.5-py2.py3-none-any.whl (35 kB)\n",
            "Collecting youtube_dl==2020.12.2\n",
            "  Downloading youtube_dl-2020.12.2-py2.py3-none-any.whl (1.8 MB)\n",
            "     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 1.8/1.8 MB 16.5 MB/s eta 0:00:00\n",
            "Installing collected packages: youtube_dl, pafy\n",
            "Successfully installed pafy-0.5.5 youtube_dl-2020.12.2\n",
            "\n",
            "\u001b[31m\u001b[1mrequirements:\u001b[0m AutoUpdate success ✅ 7.7s, installed 2 packages: ['pafy', 'youtube_dl==2020.12.2']\n",
            "\u001b[31m\u001b[1mrequirements:\u001b[0m ⚠️ \u001b[1mRestart runtime or rerun command for updates to take effect\u001b[0m\n",
            "\n",
            "1/1: https://www.youtube.com/watch?v=7AlYA4ItA74...  Success (8902 frames 1280x720 at 29.97 FPS)\n",
            "\n",
            "Traceback (most recent call last):\n",
            "  File \"/content/yolov5/classify/predict.py\", line 227, in <module>\n",
            "    main(opt)\n",
            "  File \"/content/yolov5/classify/predict.py\", line 222, in main\n",
            "    run(**vars(opt))\n",
            "  File \"/usr/local/lib/python3.10/dist-packages/torch/utils/_contextlib.py\", line 115, in decorate_context\n",
            "    return func(*args, **kwargs)\n",
            "  File \"/content/yolov5/classify/predict.py\", line 110, in run\n",
            "    for path, im, im0s, vid_cap, s in dataset:\n",
            "  File \"/content/yolov5/utils/dataloaders.py\", line 410, in __next__\n",
            "    if not all(x.is_alive() for x in self.threads) or cv2.waitKey(1) == ord('q'):  # q to quit\n",
            "cv2.error: OpenCV(4.8.0) /io/opencv/modules/highgui/src/window.cpp:1338: error: (-2:Unspecified error) The function is not implemented. Rebuild the library with Windows, GTK+ 2.x or Cocoa support. If you are on Ubuntu or Debian, install libgtk2.0-dev and pkg-config, then re-run cmake or configure script in function 'cvWaitKey'\n",
            "\n",
            "terminate called without an active exception\n"
          ]
        }
      ]
    }
  ]
}